Index: jtag_tap/rtl/verilog/tap_top.v
===================================================================
--- jtag_tap.orig/rtl/verilog/tap_top.v
+++ jtag_tap/rtl/verilog/tap_top.v
@@ -208,10 +208,10 @@ assign debug_select_o = debug_select;
 
 always @ (posedge tck_pad_i)
 begin
-  tms_q1 <= #1 tms_pad_i;
-  tms_q2 <= #1 tms_q1;
-  tms_q3 <= #1 tms_q2;
-  tms_q4 <= #1 tms_q3;
+  tms_q1 <= tms_pad_i;
+  tms_q2 <= tms_q1;
+  tms_q3 <= tms_q2;
+  tms_q4 <= tms_q3;
 end
 
 
@@ -228,15 +228,15 @@ assign tms_reset = tms_q1 & tms_q2 & tms
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    test_logic_reset<=#1 1'b1;
+    test_logic_reset<= 1'b1;
   else if (tms_reset)
-    test_logic_reset<=#1 1'b1;
+    test_logic_reset<= 1'b1;
   else
     begin
       if(tms_pad_i & (test_logic_reset | select_ir_scan))
-        test_logic_reset<=#1 1'b1;
+        test_logic_reset<= 1'b1;
       else
-        test_logic_reset<=#1 1'b0;
+        test_logic_reset<= 1'b0;
     end
 end
 
@@ -244,210 +244,210 @@ end
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    run_test_idle<=#1 1'b0;
+    run_test_idle<= 1'b0;
   else if (tms_reset)
-    run_test_idle<=#1 1'b0;
+    run_test_idle<= 1'b0;
   else
   if(~tms_pad_i & (test_logic_reset | run_test_idle | update_dr | update_ir))
-    run_test_idle<=#1 1'b1;
+    run_test_idle<= 1'b1;
   else
-    run_test_idle<=#1 1'b0;
+    run_test_idle<= 1'b0;
 end
 
 // select_dr_scan state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    select_dr_scan<=#1 1'b0;
+    select_dr_scan<= 1'b0;
   else if (tms_reset)
-    select_dr_scan<=#1 1'b0;
+    select_dr_scan<= 1'b0;
   else
   if(tms_pad_i & (run_test_idle | update_dr | update_ir))
-    select_dr_scan<=#1 1'b1;
+    select_dr_scan<= 1'b1;
   else
-    select_dr_scan<=#1 1'b0;
+    select_dr_scan<= 1'b0;
 end
 
 // capture_dr state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    capture_dr<=#1 1'b0;
+    capture_dr<= 1'b0;
   else if (tms_reset)
-    capture_dr<=#1 1'b0;
+    capture_dr<= 1'b0;
   else
   if(~tms_pad_i & select_dr_scan)
-    capture_dr<=#1 1'b1;
+    capture_dr<= 1'b1;
   else
-    capture_dr<=#1 1'b0;
+    capture_dr<= 1'b0;
 end
 
 // shift_dr state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    shift_dr<=#1 1'b0;
+    shift_dr<= 1'b0;
   else if (tms_reset)
-    shift_dr<=#1 1'b0;
+    shift_dr<= 1'b0;
   else
   if(~tms_pad_i & (capture_dr | shift_dr | exit2_dr))
-    shift_dr<=#1 1'b1;
+    shift_dr<= 1'b1;
   else
-    shift_dr<=#1 1'b0;
+    shift_dr<= 1'b0;
 end
 
 // exit1_dr state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    exit1_dr<=#1 1'b0;
+    exit1_dr<= 1'b0;
   else if (tms_reset)
-    exit1_dr<=#1 1'b0;
+    exit1_dr<= 1'b0;
   else
   if(tms_pad_i & (capture_dr | shift_dr))
-    exit1_dr<=#1 1'b1;
+    exit1_dr<= 1'b1;
   else
-    exit1_dr<=#1 1'b0;
+    exit1_dr<= 1'b0;
 end
 
 // pause_dr state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    pause_dr<=#1 1'b0;
+    pause_dr<= 1'b0;
   else if (tms_reset)
-    pause_dr<=#1 1'b0;
+    pause_dr<= 1'b0;
   else
   if(~tms_pad_i & (exit1_dr | pause_dr))
-    pause_dr<=#1 1'b1;
+    pause_dr<= 1'b1;
   else
-    pause_dr<=#1 1'b0;
+    pause_dr<= 1'b0;
 end
 
 // exit2_dr state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    exit2_dr<=#1 1'b0;
+    exit2_dr<= 1'b0;
   else if (tms_reset)
-    exit2_dr<=#1 1'b0;
+    exit2_dr<= 1'b0;
   else
   if(tms_pad_i & pause_dr)
-    exit2_dr<=#1 1'b1;
+    exit2_dr<= 1'b1;
   else
-    exit2_dr<=#1 1'b0;
+    exit2_dr<= 1'b0;
 end
 
 // update_dr state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    update_dr<=#1 1'b0;
+    update_dr<= 1'b0;
   else if (tms_reset)
-    update_dr<=#1 1'b0;
+    update_dr<= 1'b0;
   else
   if(tms_pad_i & (exit1_dr | exit2_dr))
-    update_dr<=#1 1'b1;
+    update_dr<= 1'b1;
   else
-    update_dr<=#1 1'b0;
+    update_dr<= 1'b0;
 end
 
 // select_ir_scan state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    select_ir_scan<=#1 1'b0;
+    select_ir_scan<= 1'b0;
   else if (tms_reset)
-    select_ir_scan<=#1 1'b0;
+    select_ir_scan<= 1'b0;
   else
   if(tms_pad_i & select_dr_scan)
-    select_ir_scan<=#1 1'b1;
+    select_ir_scan<= 1'b1;
   else
-    select_ir_scan<=#1 1'b0;
+    select_ir_scan<= 1'b0;
 end
 
 // capture_ir state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    capture_ir<=#1 1'b0;
+    capture_ir<= 1'b0;
   else if (tms_reset)
-    capture_ir<=#1 1'b0;
+    capture_ir<= 1'b0;
   else
   if(~tms_pad_i & select_ir_scan)
-    capture_ir<=#1 1'b1;
+    capture_ir<= 1'b1;
   else
-    capture_ir<=#1 1'b0;
+    capture_ir<= 1'b0;
 end
 
 // shift_ir state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    shift_ir<=#1 1'b0;
+    shift_ir<= 1'b0;
   else if (tms_reset)
-    shift_ir<=#1 1'b0;
+    shift_ir<= 1'b0;
   else
   if(~tms_pad_i & (capture_ir | shift_ir | exit2_ir))
-    shift_ir<=#1 1'b1;
+    shift_ir<= 1'b1;
   else
-    shift_ir<=#1 1'b0;
+    shift_ir<= 1'b0;
 end
 
 // exit1_ir state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    exit1_ir<=#1 1'b0;
+    exit1_ir<= 1'b0;
   else if (tms_reset)
-    exit1_ir<=#1 1'b0;
+    exit1_ir<= 1'b0;
   else
   if(tms_pad_i & (capture_ir | shift_ir))
-    exit1_ir<=#1 1'b1;
+    exit1_ir<= 1'b1;
   else
-    exit1_ir<=#1 1'b0;
+    exit1_ir<= 1'b0;
 end
 
 // pause_ir state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    pause_ir<=#1 1'b0;
+    pause_ir<= 1'b0;
   else if (tms_reset)
-    pause_ir<=#1 1'b0;
+    pause_ir<= 1'b0;
   else
   if(~tms_pad_i & (exit1_ir | pause_ir))
-    pause_ir<=#1 1'b1;
+    pause_ir<= 1'b1;
   else
-    pause_ir<=#1 1'b0;
+    pause_ir<= 1'b0;
 end
 
 // exit2_ir state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    exit2_ir<=#1 1'b0;
+    exit2_ir<= 1'b0;
   else if (tms_reset)
-    exit2_ir<=#1 1'b0;
+    exit2_ir<= 1'b0;
   else
   if(tms_pad_i & pause_ir)
-    exit2_ir<=#1 1'b1;
+    exit2_ir<= 1'b1;
   else
-    exit2_ir<=#1 1'b0;
+    exit2_ir<= 1'b0;
 end
 
 // update_ir state
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    update_ir<=#1 1'b0;
+    update_ir<= 1'b0;
   else if (tms_reset)
-    update_ir<=#1 1'b0;
+    update_ir<= 1'b0;
   else
   if(tms_pad_i & (exit1_ir | exit2_ir))
-    update_ir<=#1 1'b1;
+    update_ir<= 1'b1;
   else
-    update_ir<=#1 1'b0;
+    update_ir<= 1'b0;
 end
 
 /**********************************************************************************
@@ -470,16 +470,16 @@ reg                   instruction_tdo;
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    jtag_ir[`IR_LENGTH-1:0] <= #1 `IR_LENGTH'b0;
+    jtag_ir[`IR_LENGTH-1:0] <= `IR_LENGTH'b0;
   else if(capture_ir)
-    jtag_ir <= #1 4'b0101;          // This value is fixed for easier fault detection
+    jtag_ir <= 4'b0101;          // This value is fixed for easier fault detection
   else if(shift_ir)
-    jtag_ir[`IR_LENGTH-1:0] <= #1 {tdi_pad_i, jtag_ir[`IR_LENGTH-1:1]};
+    jtag_ir[`IR_LENGTH-1:0] <= {tdi_pad_i, jtag_ir[`IR_LENGTH-1:1]};
 end
 
 always @ (negedge tck_pad_i)
 begin
-  instruction_tdo <= #1 jtag_ir[0];
+  instruction_tdo <= jtag_ir[0];
 end
 /**********************************************************************************
 *                                                                                 *
@@ -500,14 +500,14 @@ reg        idcode_tdo;
 always @ (posedge tck_pad_i)
 begin
   if(idcode_select & shift_dr)
-    idcode_reg <= #1 {tdi_pad_i, idcode_reg[31:1]};
+    idcode_reg <= {tdi_pad_i, idcode_reg[31:1]};
   else
-    idcode_reg <= #1 IDCODE_VALUE;
+    idcode_reg <= IDCODE_VALUE;
 end
 
 always @ (negedge tck_pad_i)
 begin
-    idcode_tdo <= #1 idcode_reg;
+    idcode_tdo <= idcode_reg;
 end
 /**********************************************************************************
 *                                                                                 *
@@ -527,14 +527,14 @@ reg  bypass_reg;
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if (trst_pad_i)
-    bypass_reg<=#1 1'b0;
+    bypass_reg<= 1'b0;
   else if(shift_dr)
-    bypass_reg<=#1 tdi_pad_i;
+    bypass_reg<= tdi_pad_i;
 end
 
 always @ (negedge tck_pad_i)
 begin
-  bypassed_tdo <=#1 bypass_reg;
+  bypassed_tdo <= bypass_reg;
 end
 /**********************************************************************************
 *                                                                                 *
@@ -552,11 +552,11 @@ end
 always @ (posedge tck_pad_i or posedge trst_pad_i)
 begin
   if(trst_pad_i)
-    latched_jtag_ir <=#1 `IDCODE;   // IDCODE selected after reset
+    latched_jtag_ir <= `IDCODE;   // IDCODE selected after reset
   else if (tms_reset)
-    latched_jtag_ir <=#1 `IDCODE;   // IDCODE selected after reset
+    latched_jtag_ir <= `IDCODE;   // IDCODE selected after reset
   else if(update_ir)
-    latched_jtag_ir <=#1 jtag_ir;
+    latched_jtag_ir <= jtag_ir;
 end
 
 /**********************************************************************************
@@ -617,7 +617,7 @@ end
 // Tristate control for tdo_pad_o pin
 always @ (negedge tck_pad_i)
 begin
-  tdo_padoe_o <= #1 shift_ir | shift_dr | (pause_dr & debug_select);
+  tdo_padoe_o <= shift_ir | shift_dr | (pause_dr & debug_select);
 end
 /**********************************************************************************
 *                                                                                 *
@@ -628,8 +628,8 @@ end
 
 always @ (negedge tck_pad_i)
 begin
-  shift_ir_neg <= #1 shift_ir;
-  latched_jtag_ir_neg <= #1 latched_jtag_ir;
+  shift_ir_neg <= shift_ir;
+  latched_jtag_ir_neg <= latched_jtag_ir;
 end
 
 
